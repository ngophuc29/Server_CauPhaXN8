/// <reference types="node" />
import { ApsServiceRequestConfig, SdkManager } from "@aps_sdk/autodesk-sdkmanager";
import { DerivativesApi, InformationalApi, JobsApi, ManifestApi, MetadataApi, ThumbnailsApi } from "../api";
import { AllProperties, DeleteManifest, DerivativeDownload, DerivativeHead, Formats, Height, Job, JobPayload, Manifest, ModelViews, ObjectTree, ReferencesPayload, Region, SpecificProperties, SpecificPropertiesPayload, SpecifyReferences, Width, XAdsDerivativeFormat } from "../model";
import { Stream } from "stream";
export declare class ModelDerivativeClient {
    derivativesApi: DerivativesApi;
    informationalApi: InformationalApi;
    jobsApi: JobsApi;
    manifestApi: ManifestApi;
    metadataApi: MetadataApi;
    thumbnailsApi: ThumbnailsApi;
    constructor(sdkManager: SdkManager);
    getFormats(accessToken: string, optionalArgs?: {
        ifModifiedSince?: string;
        acceptEncoding?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<Formats>;
    specifyReferences(accessToken: string, urn: string, specifyReferencesRequest: ReferencesPayload, optionalArgs?: {
        region?: Region;
        options?: ApsServiceRequestConfig;
    }): Promise<SpecifyReferences>;
    startJob(accessToken: string, jobPayload: JobPayload, optionalArgs?: {
        region?: Region;
        xAdsForce?: boolean;
        xAdsDerivativeFormat?: XAdsDerivativeFormat;
        options?: ApsServiceRequestConfig;
    }): Promise<Job>;
    getManifest(accessToken: string, urn: string, optionalArgs?: {
        region?: Region;
        acceptEncoding?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<Manifest>;
    deleteManifest(accessToken: string, urn: string, optionalArgs?: {
        region?: Region;
        options?: ApsServiceRequestConfig;
    }): Promise<DeleteManifest>;
    getDerivativeUrl(accessToken: string, derivativeUrn: string, urn: string, optionalArgs?: {
        region?: Region;
        minutesExpiration?: number;
        responseContentDisposition?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<DerivativeDownload>;
    headCheckDerivative(accessToken: string, urn: string, derivativeUrn: string, optionalArgs?: {
        region?: Region;
        options?: ApsServiceRequestConfig;
    }): Promise<DerivativeHead>;
    getThumbnail(accessToken: string, urn: string, optionalArgs?: {
        region?: Region;
        width?: Width;
        height?: Height;
        options?: ApsServiceRequestConfig;
    }): Promise<Stream>;
    getObjectTree(accessToken: string, urn: string, modelGuid: string, optionalArgs?: {
        region?: Region;
        acceptEncoding?: string;
        xAdsForce?: boolean;
        xAdsDerivativeFormat?: XAdsDerivativeFormat;
        forceget?: string;
        objectId?: number;
        level?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<ObjectTree>;
    getModelViews(accessToken: string, urn: string, optionalArgs?: {
        region?: Region;
        acceptEncoding?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<ModelViews>;
    getAllProperties(accessToken: string, urn: string, modelGuid: string, optionalArgs?: {
        region?: Region;
        acceptEncoding?: string;
        xAdsForce?: boolean;
        xAdsDerivativeFormat?: XAdsDerivativeFormat;
        objectId?: number;
        forceget?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<AllProperties>;
    getSpecificProperties(accessToken: string, urn: string, modelGuid: string, specificPropertiesPayload: SpecificPropertiesPayload, optionalArgs?: {
        region?: Region;
        acceptEncoding?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<SpecificProperties>;
}
